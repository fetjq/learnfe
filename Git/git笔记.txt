git clone -b branchname gitaddress  克隆远程分支


Git忽略规则：

在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如果没有这个文件，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：

# 此为注释 – 将被 Git 忽略

*.sample 　　 # 忽略所有 .sample 结尾的文件
!lib.sample 　　 # 但 lib.sample 除外
/TODO 　　 # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/ 　　 # 忽略 build/ 目录下的所有文件
doc/*.txt 　　# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt

　　.gitignore规则不生效的解决办法

把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：

git rm -r --cached .
git add .
git commit -m 'update .gitignore'



git config --global user.name "用户名"
git config --global user.email "邮箱名"
//没有别的提示就说明设置成功!
当我们提交代码时就会提交这些信息

git config --global user.name (email)//直接查看用户名或者email

git config --list查看所有配置

-------------------------------





从工作区到暂存区到版本区的简写方式:
git commit -a -m "注释"  这样操作时，必须是已经存入过暂存区的文件


git log ->查看提交历史  ，如果提交历史过多，可以按回车显示剩余内容，按Q退出显示提交历史

★★★★★★★★★--------------git diff差异对比查看!
当同一个文件，进行了提交版本库操作之后，又经过修改提交到暂存区之后，最后再在工作区进行了修改，那么查看这三个区域的状态就用 ------>  git diff
深绿色的版本就是工作区里多出来的还未提交到暂存区的内容， 白色的部分是已经存在于版本库当中的内容


git diff --cached(或者staged) 暂存区和版本库之间的差异对比

git diff master 工作区和版本库之间的差异对比




★★★★★★★★★------------------撤销操作


git reset HEAD 文件名  ->从暂存区撤销回工作区


git checkout --文件名  ->从工作区撤销到之前一步，如果暂存区有内容，则是把工作区撤销回暂存区，如果暂存区没有内容，则是撤销回版本区

git --amend   -->的运用场景

如果我在工作区修改了两个文件，然后提交了一个文件到版本库，这时我发现搞错了，还得提交另一个文件，但是又不能进行两次提交，于是我们可以先把被落下提交的那个文件先提交到暂存区，然后再使用  
git commit  -m "注释" --amend 

进行提交，这时之前提交到版本库的那一次就不会算数，会把这两次不同时间点的提交算作是一次提交!


★★★★★★★★★删除操作

处于工作区的内容可以在图形界面中随意操作进行删除，但是放置在暂存区的文件即使工作区删除了他依然还保留，要想删除他使用:

git rm 文件名

在工作区没有删除的文件不能使用git rm直接进行删除，需要写成 git rm -f  文件名 方可删除,此时工作区的文件也会被删除; git rm --cached 文件名  只会删除暂存区，不会删除工作区的文件


★★★★★★★★★恢复操作
git checkout 版本id 之前的文件名-->恢复单个文件

(此处只需要截取部分ID即可，用git log查看到的commit 后面的值,只能恢复版本区的内容，工作区内消失的内容也会重现)


git  reset --hard 版本id  ->恢复整个版本下的所有文件

git  reset --hard HEAD^   回到上一个版本(可进行多次操作返回)

git reset --hard HEAD~2   回到上两个版本，此处的2可以变化


git reset --hard 版本id  也可以回到现在，在这之前使用 git reflog命令查看所有回到命令，包括所要回到的"现在"


★★★★★★★★★线上同步操作

git remote 查看远程仓库名称(默认的)

git remote add 可以更改仓库名称

git remote -v 查看远程仓库地址

git push origin master 同步到远程仓库-->origin为仓库名,master为分支名


★★★★★★----------------多人协作篇

在github网站上 的右上角选择 new collaborator，输入新的开发者名字,将其添加到协作开发者过程中
另一名开发者会在github右上角的小灯泡里的Watching项目中看到与他有关的项目，点击进去代表加入该项目协同邀请者一起开发

切换账号时除了更改global.user.name和email信息之外也要注意git客户端账号的切换

多人协作进行开发时，最好统一更新一下版本库。

git fetch 从远端拉取暂时不合并(最好用这种，比较安全)

git pull 从远端拉取直接就合并

git diff master origin/master 查看本地和远端有哪些不同(在git fetch之后可以进行此操作,origin为仓库名，master为分支名)

git merge origin/master 执行此操作后，会在工作区更新出两个人不同的所有代码，以供开发人员选择.


★★★★★★★---------开源项目协作(普通人没有写入权限)



搜索仓库名或者人名，点击仓库选中要合作参与的项目，选择右上角的fork按钮，这时就等于在自己的账户中有了一个该项目的镜像；

在自己的账户修改完之后，在github网站上点击该项目，选择 pull request,可与原作者发送邮件等。若涉及到的功能改动比较小，可以直接在github网站上的编辑器直接编辑


★★★★★★★---------分支相关

多个人在同一个分支开发难免出现一些冲突，所以需要每个人在不同分支进行开发，最终把代码进行合并

git branch 查看当前分支

git branch new1 创建新分支new1

git checkout new1 切换到new1分支

可以把每个版本想象成独立的盒子，版本1为盒子一，版本二为盒子二，直到某处出现了一个分支，也可理解为一条道路上突然出现了两条独立的岔路口，此时分支与分支之间是独立的。

git checkout -b new2创建新分支并切换


在新的分支修改完后，切换到主分支，使用 git  merge 之前修改的分支名

可以进行快速合并



git branch --merged 查看所有跟当前分支合并的分支(合并成功后合并的多余分支可以删掉)

git branch -d 分支名(此处的分支名是已经进行过合并的，可以直接删除，如果是未合并的分支，则不能进行删除，若非要强行删除未合并的分支，把小写d改写成D即可)

git branck --no-merged查看所有跟当前分支没有合并的分支


如果两个分支改的是相同的地方，则分支之间会发生冲突!在切换为主分支master进行mergaged合并后，如果有冲突的代码(两个人改动的一样的代码)git会提示，并会把所有冲突的代码都在工作区写出来，以供开发人员选择。

命令行中的感叹号表示有冲突



★★★★★★★★★分支提交到远程仓库


git puch origin new1  此处origin为默认仓库名，new1为分支名


在github上创建个人博客时，注意名字必须要与用户名一样,再加上github.io,我的用户名为fetjq，那么我的个人博客域名为 fetjq.github.io;




