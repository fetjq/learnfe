1.引入sea
2.使用
2.1.define()函数和exports对外提供接口的对象
如果这是模块一  moduleA.js
define(function(require,exports,module){
	function youFunctionName(){
		//code
	}
	exports.youFunctionName=youFunctionName;
})
2.2.seajs.use();//使用模块
//require,exports,module三个参数可有可无,不可更改参数名

	<script src="sea.js" id="seaJsId"></script>//最好给seajs加上id,以加快效率
	<script>
		seajs.use('modulePath(绝
		对路径或相对路径)',function(ex){
//modulePath为模块的路径,注意sea的默认根目录是sea.js文件所在的目录;此处的ex可以随便写,这个参数就是代表引入的模块
		ex.youFunctionName();

		})
		seajs.use([path1,path2],function(ex1,ex2){});//使用多个模块
	</script>
2.3解决依赖
require('需要依赖的文件路径');如果该文件也是一个模块,那么require返回值就是该模块的exports.

2.4与gurnt等合作进行合并操作时，需要给每个模块起一个id，然后配置数组.如
define('moduleId',['依赖1','依赖2'],function(require,exports,module){})

2.5配置
2.5.1如果名字太长，则可进行配置
seajs.config({
	alias:{
		shortname:'longName',
		shortname1:'longName1'
	}
});
seajs.use('shortname');

第三个参数module就是本模块的信息,module.exports,存储当前的对外接口,
注意不要重写exports={a:'xxx'};这就把exports和module.exports的引用关系破坏了，正确的做法是exports.xx=xx;或者module.exports={a:xxx};


require.async('moduleName');//异步加载模块