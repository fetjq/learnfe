npm config set package-lock false  禁止生成lock文件
npm 5.0生成lock文件后再新增包，lock不会更新，要升级npm5.0以上方可修复


npm version major|minor|patch  修改版本号

MAJOR 对应大的版本号迭代，做了不兼容旧版的修改时要更新 MAJOR 版本号
MINOR 对应小版本迭代，发生兼容旧版API的修改或功能更新时，更新MINOR版本号
PATCH 对应修订版本号，一般针对修复 BUG 的版本号

替代nvm  
npx node@4 -e "console.log(process.version)"
npx node@6 -e "console.log(process.version)"
将分别输出 v4.8.7 和 v6.13.0

1.nrm

npm install -g nrm  /切换多个版本的npm环境
nrm ls列出可用的源,*为当前使用的源
nrm use使用某个源
nrm test npmName测试某个源的响应时间
nrm test测试所有源的响应时间

npm cache clean //清缓存
npm update -g npm//更新npm
npm i npmName -D  --save-dev简写为-D
npm i npmName -S --save简写

2.gem中国
gem sources --add http://gems.ruby-china.org/ --remove https://rubygems.org/


3.推荐使用cnpm.

npm install cnpm -g --registry=https://registry.npm.taobao.org

4.换源
npm config set registry https://registry.npm.taobao.org  //设置成淘宝npm镜像
也可以用nrm.




Node NPM相关:

例如: exporess @3.1.2
完整的版本号 [主版本,次版本,版本补丁号]


1. 用 ~ 指示范围
如果指定了次要版本，允许补丁版本升级。如果没有指定次要版本，允许次要版本升级。
~1.2.3         >= 1.2.3 < 1.3.0
~1.2           >= 1.2.0 < 1.3.0
~1             >= 1.0.0 < 2.0.0
~0.2.3         >= 0.2.3 < 0.3.0
~0.2           >= 0.2.0 < 0.3.0
~0             >= 0.0.0 < 1.0.0
~1.2.3-beta.2  >=1.2.3-beta.2 < 1.3.0 (注：1.2.3版允许高于beta.2的beta版，但1.2.4-beta.2不被允许，因为是属于另一个版本号组的beta版本。)





2. 用 ^ 指定范围

允许不会改变最左边的不为零的版本号的版本提升，也就是说，^1.0.0允许次要、补丁版本升级，^0.1.0允许补丁版本升级，^0.0.x 不允许升级。

有许多开发者把 '0.x' 中的 'x' 改变作为重大改变的指示。

一个普遍的做法是，^ 适合使用在当开发者从 0.2.4 升级到 0.3.0 可能会做出不兼容的改变时。一般情况下，假定了在0.2.4 到 0.2.5 不会有不兼容改变，可以有一些新增(但不改变兼容)的改变。

^1.2.3 >=1.2.3 < 2.0.0
^0.2.3 >=0.2.3 < 0.3.0
^0.0.3 >=0.0.3 < 0.0.4
^1.2.3-beta.2 >=1.2.3-beta.2 < 2.0.0 
允许1.2.3 版的高于beta-2 的beta版本。
^0.0.3-beta.2 >=0.0.3-beta.2 < 0.0.4 
只允许0.0.3 版的高于beta-2 的版本 

当解析带有^的版本范围时，补丁版本号缺少会补 0，但是会灵活的处理，即时主要、次要版本号都为 0 也可以。

^1.2.x >= 1.2.0 < 2.0.0 
^0.0.x >= 0.0.0 < 0.1.0
^0.0 >= 0.0.0 < 0.1.0

当次要、补丁版本号缺少时会当作 0，但也会灵活处理，即时主版本号为 0 也可以 。

^1.x >= 1.0.0 < 2.0.0 
^0.x >= 0.0.0 < 1.0.0


npm install <name>安装nodejs的依赖包


-----------------------------------
npm install express@3.选择版本

1、npm install moduleNames：安装Node模块
安装完毕后会产生一个node_modules目录，其目录下就是安装的各个node模块。node的安装分为全局模式和本地模式。一般情况下会以本地模式运行，包会被安装到和你的应用程序代码的本地node_modules目录下。
在全局模式下，Node包会被安装到Node的安装目录下的node_modules下,全局无法用require或import导入。

npm install <name> --save 生产依赖
npm install <name> --save-dev开发依赖

2、npm list：查看当前目录下已安装的node包

3、npm view moudleName dependencies：查看包的依赖关系

4、npm view moduleName repository.url：查看包的源文件地址

5、npm update moduleName：更新node模块

6、npm uninstall moudleName：卸载node模块

7、npm init：会引导你创建一个package.json文件，包括名称、版本、作者这些信息等

8、npm root：查看当前包的安装路径
npm root -g：查看全局的包的安装路径

9、npm -v：查看npm安装的版本